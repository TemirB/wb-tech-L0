// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cache/cache.go

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	reflect "reflect"

	domain "github.com/TemirB/wb-tech-L0/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// Mockrepo is a mock of repo interface.
type Mockrepo struct {
	ctrl     *gomock.Controller
	recorder *MockrepoMockRecorder
}

// MockrepoMockRecorder is the mock recorder for Mockrepo.
type MockrepoMockRecorder struct {
	mock *Mockrepo
}

// NewMockrepo creates a new mock instance.
func NewMockrepo(ctrl *gomock.Controller) *Mockrepo {
	mock := &Mockrepo{ctrl: ctrl}
	mock.recorder = &MockrepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepo) EXPECT() *MockrepoMockRecorder {
	return m.recorder
}

// GetByUID mocks base method.
func (m *Mockrepo) GetByUID(ctx context.Context, uid string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUID", ctx, uid)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUID indicates an expected call of GetByUID.
func (mr *MockrepoMockRecorder) GetByUID(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUID", reflect.TypeOf((*Mockrepo)(nil).GetByUID), ctx, uid)
}

// RecentOrderIDs mocks base method.
func (m *Mockrepo) RecentOrderIDs(ctx context.Context, limit int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecentOrderIDs", ctx, limit)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecentOrderIDs indicates an expected call of RecentOrderIDs.
func (mr *MockrepoMockRecorder) RecentOrderIDs(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecentOrderIDs", reflect.TypeOf((*Mockrepo)(nil).RecentOrderIDs), ctx, limit)
}

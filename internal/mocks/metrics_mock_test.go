// Code generated by MockGen. DO NOT EDIT.
// Source: internal/observability/metrics.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// IncCacheHit mocks base method.
func (m *MockMetrics) IncCacheHit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncCacheHit")
}

// IncCacheHit indicates an expected call of IncCacheHit.
func (mr *MockMetricsMockRecorder) IncCacheHit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCacheHit", reflect.TypeOf((*MockMetrics)(nil).IncCacheHit))
}

// IncCacheMiss mocks base method.
func (m *MockMetrics) IncCacheMiss() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncCacheMiss")
}

// IncCacheMiss indicates an expected call of IncCacheMiss.
func (mr *MockMetricsMockRecorder) IncCacheMiss() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCacheMiss", reflect.TypeOf((*MockMetrics)(nil).IncCacheMiss))
}

// ObserveHTTP mocks base method.
func (m *MockMetrics) ObserveHTTP(method, route string, status int, durMs float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveHTTP", method, route, status, durMs)
}

// ObserveHTTP indicates an expected call of ObserveHTTP.
func (mr *MockMetricsMockRecorder) ObserveHTTP(method, route, status, durMs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveHTTP", reflect.TypeOf((*MockMetrics)(nil).ObserveHTTP), method, route, status, durMs)
}

// ObserveKafka mocks base method.
func (m *MockMetrics) ObserveKafka(processMs float64, ok bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveKafka", processMs, ok)
}

// ObserveKafka indicates an expected call of ObserveKafka.
func (mr *MockMetricsMockRecorder) ObserveKafka(processMs, ok interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveKafka", reflect.TypeOf((*MockMetrics)(nil).ObserveKafka), processMs, ok)
}

// ObserveLookup mocks base method.
func (m *MockMetrics) ObserveLookup(source string, cacheMs, dbMs float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveLookup", source, cacheMs, dbMs)
}

// ObserveLookup indicates an expected call of ObserveLookup.
func (mr *MockMetricsMockRecorder) ObserveLookup(source, cacheMs, dbMs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveLookup", reflect.TypeOf((*MockMetrics)(nil).ObserveLookup), source, cacheMs, dbMs)
}

// ObserveUpsert mocks base method.
func (m *MockMetrics) ObserveUpsert(dbWriteMs float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveUpsert", dbWriteMs)
}

// ObserveUpsert indicates an expected call of ObserveUpsert.
func (mr *MockMetricsMockRecorder) ObserveUpsert(dbWriteMs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveUpsert", reflect.TypeOf((*MockMetrics)(nil).ObserveUpsert), dbWriteMs)
}

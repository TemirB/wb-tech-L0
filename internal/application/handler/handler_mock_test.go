// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/handler/handler.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	domain "github.com/TemirB/wb-tech-L0/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockService) Upsert(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServiceMockRecorder) Upsert(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockService)(nil).Upsert), ctx, order)
}

// Mockbrk is a mock of brk interface.
type Mockbrk struct {
	ctrl     *gomock.Controller
	recorder *MockbrkMockRecorder
}

// MockbrkMockRecorder is the mock recorder for Mockbrk.
type MockbrkMockRecorder struct {
	mock *Mockbrk
}

// NewMockbrk creates a new mock instance.
func NewMockbrk(ctrl *gomock.Controller) *Mockbrk {
	mock := &Mockbrk{ctrl: ctrl}
	mock.recorder = &MockbrkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockbrk) EXPECT() *MockbrkMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *Mockbrk) Allow() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow")
	ret0, _ := ret[0].(error)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockbrkMockRecorder) Allow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*Mockbrk)(nil).Allow))
}

// Failure mocks base method.
func (m *Mockbrk) Failure() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Failure")
}

// Failure indicates an expected call of Failure.
func (mr *MockbrkMockRecorder) Failure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Failure", reflect.TypeOf((*Mockbrk)(nil).Failure))
}

// Success mocks base method.
func (m *Mockbrk) Success() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Success")
}

// Success indicates an expected call of Success.
func (mr *MockbrkMockRecorder) Success() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Success", reflect.TypeOf((*Mockbrk)(nil).Success))
}

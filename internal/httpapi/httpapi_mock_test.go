// Code generated by MockGen. DO NOT EDIT.
// Source: internal/httpapi/httpapi.go

// Package httpapi is a generated GoMock package.
package httpapi

import (
	context "context"
	reflect "reflect"

	service "github.com/TemirB/wb-tech-L0/internal/application/service"
	domain "github.com/TemirB/wb-tech-L0/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockServerWithStats is a mock of ServerWithStats interface.
type MockServerWithStats struct {
	ctrl     *gomock.Controller
	recorder *MockServerWithStatsMockRecorder
}

// MockServerWithStatsMockRecorder is the mock recorder for MockServerWithStats.
type MockServerWithStatsMockRecorder struct {
	mock *MockServerWithStats
}

// NewMockServerWithStats creates a new mock instance.
func NewMockServerWithStats(ctrl *gomock.Controller) *MockServerWithStats {
	mock := &MockServerWithStats{ctrl: ctrl}
	mock.recorder = &MockServerWithStatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerWithStats) EXPECT() *MockServerWithStatsMockRecorder {
	return m.recorder
}

// GetByUIDWithStats mocks base method.
func (m *MockServerWithStats) GetByUIDWithStats(ctx context.Context, uid string) (*domain.Order, service.LookupStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUIDWithStats", ctx, uid)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(service.LookupStats)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByUIDWithStats indicates an expected call of GetByUIDWithStats.
func (mr *MockServerWithStatsMockRecorder) GetByUIDWithStats(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUIDWithStats", reflect.TypeOf((*MockServerWithStats)(nil).GetByUIDWithStats), ctx, uid)
}

// UpsertWithStats mocks base method.
func (m *MockServerWithStats) UpsertWithStats(ctx context.Context, order *domain.Order) (service.UpsertStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertWithStats", ctx, order)
	ret0, _ := ret[0].(service.UpsertStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertWithStats indicates an expected call of UpsertWithStats.
func (mr *MockServerWithStatsMockRecorder) UpsertWithStats(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWithStats", reflect.TypeOf((*MockServerWithStats)(nil).UpsertWithStats), ctx, order)
}
